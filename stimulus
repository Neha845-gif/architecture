// Mode=1 (Arithmetic Operations)
00000001_00_11_00000101_00000011_0000_0_1_1_0000000000001000_0_000_0_0 //ADD
00000010_00_11_10000101_10000011_0000_0_1_1_0000000000001000_1_000_1_0 //ADD
00000011_00_11_00001000_00000011_0001_0_1_1_0000000000000101_0_000_0_0 //SUB
00001000_00_11_00000101_00000011_0010_1_1_1_0000000000001001_0_000_0_0 //ADD_CIN
00000100_00_11_00001000_00000011_0011_1_1_1_0000000000000110_0_000_0_0 //SUB_CIN
00001001_00_01_00000101_00000000_0100_0_1_1_0000000000000110_0_000_0_0 //INC_A
00001001_00_01_00000101_00000000_0101_0_1_1_0000000000000100_0_000_0_0 //DEC_A
00010001_00_10_00000000_00000101_0110_0_1_1_0000000000000110_0_000_0_0 //INC_B
00100001_00_10_00000000_00000101_0111_0_1_1_0000000000000100_0_000_0_0 //DEC_B
01000001_00_11_00000101_00000011_1000_0_1_1_0000000000000000_0_001_0_0 //CMP
10000001_00_11_00000011_00000010_1001_0_1_1_0000000000010010_0_000_0_0 //INC_MUL
01000001_00_11_00000011_00000010_1010_0_1_1_0000000000001100_0_000_0_0 //SHL1_A_MUL_B
01100001_00_11_01111111_00000001_1011_0_1_1_0000000010000000_0_001_1_0 //ADD_SIGN
01101001_00_11_10000000_00000001_1100_0_1_1_0000000001111111_0_010_1_0 //SUB_SIGN
00001100_00_01_10000100_10101010_1111_0_1_1_0000000000000000_0_000_0_1// invalid cmd in 2'b01
00101100_00_10_10000100_10101010_1111_0_1_1_0000000000000000_0_000_0_1// invalid cmd in 2'b10
00001001_00_11_00000101_00000000_0101_0_1_1_0000000000000100_0_000_0_0 //DEC_A_11
00010001_00_11_00000000_00000101_0110_0_1_1_0000000000000110_0_000_0_0 //INC_B_11
00100001_00_11_00000000_00000101_0111_0_1_1_0000000000000100_0_000_0_0 //DEC_B_11
10000001_00_11_11111111_11111111_1001_0_1_1_1111111111111111_1_000_0_0 //INC_MUL
01000001_00_11_11111111_11111111_1010_0_1_1_1111111111111111_1_000_0_0 //SHL1_A_MUL_B


// Mode=0 (Logical Operations)
00001001_00_11_01010101_00110011_0000_0_1_0_0000000000000001_0_000_0_0 //AND
00001001_00_11_01010101_00110011_0001_0_1_0_0000000011101110_0_000_0_0 //NAND
00010001_00_11_01010101_00110011_0010_0_1_0_0000000001110111_0_000_0_0 //OR
00011001_00_11_01010101_00110011_0011_0_1_0_0000000010001000_0_000_0_0 //NOR
00111001_00_11_01010101_00110011_0100_0_1_0_0000000000110110_0_000_0_0 //XOR
00000111_00_11_01010101_00110011_0101_0_1_0_0000000011001001_0_000_0_0 //XNOR
00001111_00_01_01010101_00000000_0110_0_1_0_0000000010101010_0_000_0_0 //NOT_A
11000001_00_10_00000000_00110011_0111_0_1_0_0000000011001100_0_000_0_0 //NOT_B
01000001_00_01_01010101_00000000_1000_0_1_0_0000000000101010_0_000_0_0 //SHR1_A
00000001_00_01_01010101_00000000_1001_0_1_0_0000000010101010_0_000_0_0 //SHL1_A
00111001_00_10_00000000_00110011_1010_0_1_0_0000000000011001_0_000_0_0 //SHR1_B
10000001_00_10_00000000_00110011_1011_0_1_0_0000000001100110_0_000_0_0 //SHL1_B
11000001_00_11_11000000_00000011_1100_0_1_0_0000000000000110_0_000_0_0 //ROL_A_B

01000001_00_11_01010101_00000000_1000_0_1_0_0000000000101010_0_000_0_0 //SHR1_A_11
00000001_00_11_01010101_00000000_1001_0_1_0_0000000010101010_0_000_0_0 //SHL1_A_11
00111001_00_11_00000000_00110011_1010_0_1_0_0000000000011001_0_000_0_0 //SHR1_B_11
10000001_00_11_00000000_00110011_1011_0_1_0_0000000001100110_0_000_0_0 //SHL1_B_11
11000001_00_11_11000000_00000011_1101_0_1_0_0000000000000110_0_000_0_0 //ROL_A_B_11
00001111_00_11_01010101_00000000_0110_0_1_0_0000000010101010_0_000_0_0 //NOT_A
11000001_00_11_00000000_00110011_0111_0_1_0_0000000011001100_0_000_0_0 //NOT_B
// Special Cases
00000001_00_00_00000001_00000001_0000_0_1_1_0000000000000000_0_000_0_1 //INVALID_INP
00000001_00_11_00000001_00000001_1111_0_1_1_0000000000000000_0_000_0_1 //INVALID_CMD
00000001_00_11_00000001_00000001_0000_0_0_1_0000000000000000_0_000_0_0 //CE_DISABLED
00000001_00_11_11000000_00001000_1100_0_1_0_0000000000000000_0_000_0_1 //INVALID_ROTATE

//dut reset cases

00000001_00_11_01111111_10000001_1011_0_0_1_0000000000000000_0_000_0_0 //  CE=0 during reset (inactive), all outputs should be 0
00000001_00_11_11111111_11111111_1111_1_0_1_0000000000000000_0_000_0_0//  All inputs maxed during reset, outputs should still be 0
00000001_00_11_01111111_10000001_1011_0_1_1_0000000100000000_0_001_0_0//  no overflow
00000001_00_11_01010101_10101010_0000_1_0_1_0000000100000000_0_010_0_0 // During reset
00000001_00_11_01010101_10101010_0000_1_1_1_0000000011111111_0_000_0_0 // After reset
00000001_00_11_01111111_01111111_1011_0_1_1_0000000011111110_0_100_1_0 // Normal op
00000001_00_11_01111111_01111111_1011_0_1_1_0000000011111110_0_100_1_0 // Reset asserted mid-operatio00000001_00_00_01000000_00000000_1011_0_1_1_0000000011111110_0_100_0_0 // INP_VALID=00 during reset




//  Single-bit toggles on CMD
00000001_00_11_00000000_00000000_0001_0_1_1_0000000000000000_0_000_0_0 // CMD[0]
00000001_00_11_00000000_00000000_0010_0_1_1_0000000000000000_0_000_0_0 // CMD[1]
00000001_00_11_00000000_00000000_0100_0_1_1_0000000000000001_0_000_0_0 // CMD[2]
00000001_00_11_00000000_00000000_1000_0_1_1_0000000000000001_0_100_0_0 // CMD[3]

//  Control signal toggles
00000001_00_01_00000001_xxxxxxxx_0000_0_1_1_0000000000000000_0_000_0_1 // INP_VALID=01
00000001_00_10_xxxxxxxx_00000001_0000_0_1_1_0000000000000000_0_000_0_1 // INP_VALID=10
00000001_00_11_00000001_00000001_0000_1_1_1_0000000000000010_0_000_0_0 // CIN toggle


//  Full EGL flag evaluations (>, =, <)
00000001_00_11_00000100_00000011_1000_0_1_1_0000000000000000_0_100_0_0 // G=1 (A>B)
00000001_00_11_00000011_00000011_1000_0_1_1_0000000000000000_0_010_0_0 // E=1 (A=B)
00000001_00_11_00000010_00000011_1000_0_1_1_0000000000000000_0_001_0_0 // L=1 (A<B)

//  Overflow cases (signed/unsigned)
00000001_00_11_01111111_01111111_0000_0_1_1_0000000011111110_0_000_0_0 // Unsigned overflow
00000001_00_11_01000000_01000000_1011_0_1_1_0000000010000000_0_100_1_0 // Signed overflow

//  Error condition evaluations
00000001_00_00_xxxxxxxx_xxxxxxxx_xxxx_x_1_1_0000000000000000_0_000_0_1 // INP_VALID=00
00000001_00_11_00000001_00000001_1111_0_1_1_0000000000000000_0_000_0_1 // Invalid CMD
00000001_00_11_11000000_00001000_1100_0_1_0_0000000000000000_0_000_0_1 // Invalid rotate
//  Mode switching with same operation
00000001_00_11_00001111_00001111_0000_0_1_0_0000000000001111_0_000_0_0 // MODE=0 (AND)
00000001_00_11_00001111_00001111_0000_0_1_1_0000000000011110_0_000_0_0 // MODE=1 (ADD)

//  Carry chain propagation
00000001_00_11_11111111_00000001_0000_0_1_1_0000000100000000_1_000_0_0 // Full carry
00000001_00_11_11111111_00000001_0010_1_1_1_0000000100000001_1_000_0_0 // With CIN


// Bit 0
00000001_00_11_00000001_00000000_0000_0_1_1_0000000000000001_0_000_0_0 // OPA=00000001

// Bit 1
00000001_00_11_00000010_00000000_0000_0_1_1_0000000000000010_0_000_0_0 // OPA=00000010

// Bit 2
00000001_00_11_00000100_00000000_0000_0_1_1_0000000000000100_0_000_0_0 // OPA=00000100

// Bit 3
00000001_00_11_00001000_00000000_0000_0_1_1_0000000000001000_0_000_0_0 // OPA=00001000

// Bit 4
00000001_00_11_00010000_00000000_0000_0_1_1_0000000000010000_0_000_0_0 // OPA=00010000

// Bit 5
00000001_00_11_00100000_00000000_0000_0_1_1_0000000000100000_0_000_0_0 // OPA=00100000

// Bit 6
00000001_00_11_01000000_00000000_0000_0_1_1_0000000001000000_0_000_0_0 // OPA=01000000

// Bit 7
00001001_00_11_10000000_00000000_0000_0_1_1_0000000010000000_0_000_0_0 // OPA=10000000
00000101_00_11_00000001_00000000_0000_0_1_1_0000000000000001_0_000_0_0  // Bit 0
00000001_00_11_00000010_00000000_0000_0_1_1_0000000000000010_0_000_0_0  // Bit 1
00000010_00_11_00000100_00000000_0000_0_1_1_0000000000000100_0_000_0_0  // Bit 2
00000100_00_11_00001000_00000000_0000_0_1_1_0000000000001000_0_000_0_0  // Bit 3
00001000_00_11_00010000_00000000_0000_0_1_1_0000000000010000_0_000_0_0  // Bit 4
00010000_00_11_00100000_00000000_0000_0_1_1_0000000000100000_0_000_0_0  // Bit 5
00100000_00_11_01000000_00000000_0000_0_1_1_0000000001000000_0_000_0_0  // Bit 6
01000000_00_11_10000000_00000000_0000_0_1_1_0000000010000000_0_000_0_0  // Bit 7
10000000_00_11_11111111_11111110_0000_0_1_1_0000000111111100_1_000_0_0  // Bit 0
11111111_00_11_11111111_11111101_0000_0_1_1_0000000111111100_1_000_0_0  // Bit 1
11111110_00_11_11111111_11111011_0000_0_1_1_0000000111111010_1_000_0_0  // Bit 2
11111101_00_11_11111111_11110111_0000_0_1_1_0000000111110110_1_000_0_0  // Bit 3
11111011_00_11_11111111_11101111_0000_0_1_1_0000000111101110_1_000_0_0  // Bit 4
11110111_00_11_11111111_11011111_0000_0_1_1_0000000111011110_1_000_0_0  // Bit 5
//    RES[15:10]=111111, mul_res[15:0]=1111111000000001
00001111_11_11_11111111_11111111_0000_1_1_1_0000000111111110_1_000_0_0

// 2. LARGE SHIFT (0xFF << 9 = 0xFE00) - Hits RES[15:10]=111111
00001111_11_11_11111111_00001001_0010_0_1_1_0000000100001000_1_000_0_0

// 3. MULTIPLY MID-RANGE (240*15=3600=0xE10) - Hits mul_res[11:4]=111000010
00001111_11_11_11110000_00001111_0000_1_1_1_0000000011111111_0_000_0_0

// 4. INCREMENTAL MULTIPLY (254+1)*(254+1)=65025=0xFE01)
00001111_11_11_11111110_11111110_1001_1_1_1_1111111000000001_0_000_0_0

// 5. COMBINATION (192*128=24576=0x6000) - Hits RES[15:10]=110000
00001111_11_11_11000000_10000000_0000_1_1_1_0000000101000000_0_000_0_0


//  mul_res[2:0] = 110 (bit[1] = 1)
00001111_11_11_00000011_00000010_0000_1_1_1_0000000000000110_0_000_0_0
//  mul_res[7:4] = 1110
00001111_11_11_00001111_00001111_0000_1_1_1_0000000011100001_0_000_0_0


00000011_00_11_11111111_00000000_0000_0_1_1_0000000011111111_0_000_0_0  // Max OPA / Zero OPB
00000011_00_11_11111111_11111111_0000_0_1_1_0000000111111110_0_000_0_0  // All Ones (No Error)
00000001_00_11_11111110_11111111_0000_0_1_1_0000000111111101_0_000_0_0  // Single-Bit OPA Flip (Correctable)
00001111_00_11_00000000_00000000_0000_0_1_1_0000000000000000_0_000_0_0  // All Zeros (Baseline)
01110001_00_11_10011001_01100110_0000_0_1_1_0000000011111111_0_000_0_0  // Complementary Patterns
11110001_00_11_10011001_01100100_0000_0_1_1_0000000011111101_0_000_0_1  // Double-Bit OPB Error (Uncorrectable)
00001111_00_11_01010101_10101010_1111_0_1_1_0000000000000000_0_000_0_1
00010000_00_11_01010101_10101010_1111_0_1_0_0000000000000000_0_000_0_1
00010001_00_00_01010101_10101010_0000_0_1_1_0000000000000000_0_000_0_1
00010010_00_11_01010101_00001000_1100_0_1_0_0000000001010101_0_000_0_1//cmd_defualt
// Case 1: Same signs but result sign matches (no overflow)
00000001_00_11_01000000_00100000_1011_0_1_1_0000000101010101_0_000_0_0  // 64 + 32 = 96

// Case 2: Negative operands with negative result (no overflow)
00000001_00_11_11000000_11100000_1011_0_1_1_0000000101010101_0_000_0_0  // -64 + -32 = -96

// Case 3: Different signs with result matching OPB sign (normal addition)
00000001_00_11_01000000_10000000_1011_0_1_1_0000000101010101_0_000_0_0  // 64 + -128 = -64 (0x40 + 0x80 = 0xC0)

00000001_00_11_01000000_00100000_1011_0_1_1_0000000101010101_0_000_0_0  //no hit


00000011_00_11_01000000_00000001_1100_0_1_1_0000000000111111_0_010_0_0//one false
00000100_00_11_11000000_00000001_1100_0_1_1_0000000010111111_0_001_0_0//both false
